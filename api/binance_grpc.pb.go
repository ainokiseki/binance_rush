// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: binance.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Binance_Ping_FullMethodName               = "/api.Binance/Ping"
	Binance_CreateCoinRushTask_FullMethodName = "/api.Binance/CreateCoinRushTask"
	Binance_ListTask_FullMethodName           = "/api.Binance/ListTask"
)

// BinanceClient is the client API for Binance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceClient interface {
	Ping(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	CreateCoinRushTask(ctx context.Context, in *CreateCoinRushTaskRequest, opts ...grpc.CallOption) (*CreateCoinRushTaskReply, error)
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskReply, error)
}

type binanceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceClient(cc grpc.ClientConnInterface) BinanceClient {
	return &binanceClient{cc}
}

func (c *binanceClient) Ping(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Binance_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceClient) CreateCoinRushTask(ctx context.Context, in *CreateCoinRushTaskRequest, opts ...grpc.CallOption) (*CreateCoinRushTaskReply, error) {
	out := new(CreateCoinRushTaskReply)
	err := c.cc.Invoke(ctx, Binance_CreateCoinRushTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskReply, error) {
	out := new(ListTaskReply)
	err := c.cc.Invoke(ctx, Binance_ListTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinanceServer is the server API for Binance service.
// All implementations must embed UnimplementedBinanceServer
// for forward compatibility
type BinanceServer interface {
	Ping(context.Context, *HelloRequest) (*HelloReply, error)
	CreateCoinRushTask(context.Context, *CreateCoinRushTaskRequest) (*CreateCoinRushTaskReply, error)
	ListTask(context.Context, *ListTaskRequest) (*ListTaskReply, error)
	mustEmbedUnimplementedBinanceServer()
}

// UnimplementedBinanceServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceServer struct {
}

func (UnimplementedBinanceServer) Ping(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBinanceServer) CreateCoinRushTask(context.Context, *CreateCoinRushTaskRequest) (*CreateCoinRushTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinRushTask not implemented")
}
func (UnimplementedBinanceServer) ListTask(context.Context, *ListTaskRequest) (*ListTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedBinanceServer) mustEmbedUnimplementedBinanceServer() {}

// UnsafeBinanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinanceServer will
// result in compilation errors.
type UnsafeBinanceServer interface {
	mustEmbedUnimplementedBinanceServer()
}

func RegisterBinanceServer(s grpc.ServiceRegistrar, srv BinanceServer) {
	s.RegisterService(&Binance_ServiceDesc, srv)
}

func _Binance_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Binance_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).Ping(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binance_CreateCoinRushTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinRushTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).CreateCoinRushTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Binance_CreateCoinRushTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).CreateCoinRushTask(ctx, req.(*CreateCoinRushTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binance_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Binance_ListTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Binance_ServiceDesc is the grpc.ServiceDesc for Binance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Binance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Binance",
	HandlerType: (*BinanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Binance_Ping_Handler,
		},
		{
			MethodName: "CreateCoinRushTask",
			Handler:    _Binance_CreateCoinRushTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _Binance_ListTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "binance.proto",
}
